--Benjamin Towle
--11/1/2023
--reg_ID_EX.vhd
--File contains elements of an N bit register with dffg.vhd as a component

library IEEE;
use IEEE.std_logic_1164.all;

entity reg_ID_EX is 
   generic(N : integer := 32);
   port(i_CLK        : in std_logic;                     
        i_RST        : in std_logic;                         
        i_WE         : in std_logic;
	i_D	     : in std_logic_vector(N-1 downto 0); --data input
	o_Q	     : out std_logic_vector(N-1 downto 0); --data output

	--Control signals forwarded to next stages (input)
	i_memWr      : in std_logic;
	i_memToReg   : in std_logic;
	i_jal        : in std_logic;
	i_regDst     : in std_logic;
	i_halt       : in std_logic;
	i_regWr      : in std_logic;

	--Control signals used in Execution stage (input)
	i_ALUSrc     : in std_logic;
	i_ALUOp      : in std_logic_vector(3 downto 0);
	i_shiftType  : in std_logic;
	i_shiftDir   : in std_logic;
	i_ctlExt     : in std_logic;
	i_addSub     : in std_logic;
	i_signed     : in std_logic;
	i_lui        : in std_logic;
	i_j          : in std_logic;
	i_jr         : in std_logic;
	i_jump       : in std_logic;
	i_beq        : in std_logic;
	i_bne        : in std_logic;
	i_branch     : in std_logic;

	--32-Bit and 3-bit value inputs
	i_PC_Incremented  : in std_logic_vector(31 downto 0);
	i_RSdata          : in std_logic_vector(31 downto 0);
	i_RTdata          : in std_logic_vector(31 downto 0);
	i_RTaddr          : in std_logic_vector(3 downto 0);
	i_RDaddr          : in std_logic_vector(3 downto 0);
	i_Imm             : in std_logic_vector(31 downto 0);

	--Control signals forwarded to next stages (output)
	o_memWr      : out std_logic;
	o_memToReg   : out std_logic;
	o_jal        : out std_logic;
	o_regDst     : out std_logic;
	o_halt       : out std_logic;
	o_regWr      : out std_logic;

	--Control signals used in Execution stage (output)
	o_ALUSrc     : out std_logic;
	o_ALUOp      : out std_logic_vector(3 downto 0);
	o_shiftType  : out std_logic;
	o_shiftDir   : out std_logic;
	o_ctlExt     : out std_logic;
	o_addSub     : out std_logic;
	o_signed     : out std_logic;
	o_lui        : out std_logic;
	o_j          : out std_logic;
	o_jr         : out std_logic;
	o_jump       : out std_logic;
	o_beq        : out std_logic;
	o_bne        : out std_logic;
	o_branch     : out std_logic;

	--32-Bit and 3-bit value outputs
	o_PC_Incremented      : out std_logic_vector(31 downto 0);
	o_RSdata              : out std_logic_vector(31 downto 0);
	o_RTdata              : out std_logic_vector(31 downto 0);
	o_RTaddr              : out std_logic_vector(3 downto 0);
	o_RDaddr              : out std_logic_vector(3 downto 0);
	o_Imm                 : out std_logic_vector(31 downto 0));       
       
end reg_ID_EX;

architecture structure of reg_ID_EX is

 component dffg is 
  port(i_CLK        : in std_logic;     -- Clock input
       i_RST        : in std_logic;     -- Reset input
       i_WE         : in std_logic;     -- Write enable input
       i_D          : in std_logic;     -- Data value input
       o_Q          : out std_logic);   -- Data value output
 end component;

component nBitRegister is   
 generic (N: integer := 32);
   port(i_CLK          : in std_logic;                          -- Clock input
        i_RST        : in std_logic;                          -- Reset input
        i_WE         : in std_logic;                          -- Write enable input
        i_D          : in std_logic_vector(N-1 downto 0);     -- Data value input
        o_Q          : out std_logic_vector(N-1 downto 0));   -- Data value output
end component; 


begin

--Quite a few dff generates for all the control signals here 
G_MEM_WR : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_memWr,
	o_Q    => o_memWr);

G_MEMTOREG : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_memToReg,
	o_Q    => o_memToReg);

G_REGDST : dffg 
port map(i_CLK  => i_CLK,
   i_RST  => i_RST,
   i_WE   => i_WE,
   i_D    => i_regDst,
   o_Q    => o_regDst);

G_HALT : dffg 
port map(i_CLK  => i_CLK,
  i_RST  => i_RST,
  i_WE   => i_WE,
  i_D    => i_halt,
  o_Q    => o_halt);


G_JAL : dffg 
 port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_jal,
	o_Q    => o_jal);

G_J : dffg 
 port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_j,
	o_Q    => o_j);

G_Jump : dffg 
port map(i_CLK  => i_CLK,
   i_RST  => i_RST,
   i_WE   => i_WE,
   i_D    => i_jump,
   o_Q    => o_jump);

G_JR : dffg 
port map(i_CLK  => i_CLK,
  i_RST  => i_RST,
  i_WE   => i_WE,
  i_D    => i_jr,
  o_Q    => o_jr);


G_BEQ : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_beq,
	o_Q    => o_beq);

G_BNE : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_bne,
	o_Q    => o_bne);

G_BRANCH : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_branch,
	o_Q    => o_branch);

G_REG_WR : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_regWr,
	o_Q    => o_regWr);

G_ALU_SRC : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_ALUSrc,
	o_Q    => o_ALUSrc);


G_ALU_OP : nBitRegister
generic map (N  => 4)
port map(i_CLK  => i_CLK,
	 i_RST  => i_RST,
	 i_WE   => i_WE,
	 i_D    => i_ALUOp,
	 o_Q    => o_ALUOp);

G_SHIFT_TYPE : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_shiftType,
	o_Q    => o_shiftType);

G_SHIFT_DIR : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_shiftDir,
	o_Q    => o_shiftDir);

G_CTL_EXT : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_ctlExt,
	o_Q    => o_ctlExt);

G_ADDSUB : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_addSub,
	o_Q    => o_addSub);

G_SIGNED : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_signed,
	o_Q    => o_signed);

G_LUI : dffg 
port map(i_CLK  => i_CLK,
	i_RST  => i_RST,
	i_WE   => i_WE,
	i_D    => i_lui,
	o_Q    => o_lui);



--32 bit registers stored here
G_PC_PLUS_4 : nBitRegister
generic map (N  => 32)
port map(i_CLK  => i_CLK,
	 i_RST  => i_RST,
	 i_WE   => i_WE,
	 i_D    => i_PC_Incremented,
	 o_Q    => o_PC_Incremented);

G_RS_DATA : nBitRegister
generic map (N  => 32)
port map(i_CLK  => i_CLK,
	 i_RST  => i_RST,
	 i_WE   => i_WE,
	 i_D    => i_RSdata,
	 o_Q    => o_RSdata);

G_RT_DATA : nBitRegister
generic map (N  => 32)
port map(i_CLK  => i_CLK,
	 i_RST  => i_RST,
	 i_WE   => i_WE,
	 i_D    => i_RTdata,
	 o_Q    => o_RTdata);

G_RT_ADDR : nBitRegister
generic map (N  => 4)
port map(i_CLK  => i_CLK,
	 i_RST  => i_RST,
	 i_WE   => i_WE,
	 i_D    => i_RTaddr,
	 o_Q    => o_RTaddr);


G_RD_ADDR : nBitRegister
generic map (N  => 4)
port map(i_CLK  => i_CLK,
	 i_RST  => i_RST,
	 i_WE   => i_WE,
	 i_D    => i_RDaddr,
	 o_Q    => o_RDaddr);

G_Imm : nBitRegister
generic map (N  => 32)
port map(i_CLK  => i_CLK,
	 i_RST  => i_RST,
	 i_WE   => i_WE,
	 i_D    => i_Imm,
	 o_Q    => o_Imm);






  

end structure;